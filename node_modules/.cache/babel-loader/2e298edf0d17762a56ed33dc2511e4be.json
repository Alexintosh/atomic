{"ast":null,"code":"Blockly.Blocks[\"ens_resolver\"] = {\n  /**\n   * Block for string length operator.\n   * @this Blockly.Block\n   */\n  init: function init() {\n    this.jsonInit({\n      message0: \"%1 %2 %3\",\n      args0: [{\n        type: \"field_image\",\n        src: \"./media/ens.png\",\n        width: 30,\n        height: 30\n      }, {\n        type: \"field_vertical_separator\"\n      }, {\n        type: \"input_value\",\n        name: \"STRING\"\n      }],\n      category: Blockly.Categories.operators,\n      extensions: [\"colours_sensing\", \"output_string\"]\n    });\n  },\n  encoder: function encoder() {\n    // encoding for atomic\n    var encoder = new ethers.utils.AbiCoder();\n    var types = [\"address\", \"uint256\", \"bytes\"]; // to, value, data\n\n    return encoder.encode(types, [\"0x0\", 0, \"0x0\"]);\n  },\n  template: function template() {\n    return \"\" + '<block type=\"ens_resolver\" id=\"ens_resolver\">' + '<value name=\"STRING\">' + '<shadow type=\"text\">' + '<field name=\"TEXT\">vitalik.eth</field>' + '</shadow>' + '</value>' + '</block>';\n  }\n};","map":{"version":3,"sources":["/Users/polaco/prog/atomic/atomic/blocks/ens_resolver.js"],"names":["Blockly","Blocks","init","jsonInit","message0","args0","type","src","width","height","name","category","Categories","operators","extensions","encoder","ethers","utils","AbiCoder","types","encode","template"],"mappings":"AAAAA,OAAO,CAACC,MAAR,CAAe,cAAf,IAAiC;AAC/B;;;;AAIAC,EAAAA,IAAI,EAAE,gBAAY;AAChB,SAAKC,QAAL,CAAc;AACZC,MAAAA,QAAQ,EAAE,UADE;AAEZC,MAAAA,KAAK,EAAE,CAAC;AACJC,QAAAA,IAAI,EAAE,aADF;AAEJC,QAAAA,GAAG,EAAE,iBAFD;AAGJC,QAAAA,KAAK,EAAE,EAHH;AAIJC,QAAAA,MAAM,EAAE;AAJJ,OAAD,EAML;AACEH,QAAAA,IAAI,EAAE;AADR,OANK,EASL;AACEA,QAAAA,IAAI,EAAE,aADR;AAEEI,QAAAA,IAAI,EAAE;AAFR,OATK,CAFK;AAgBZC,MAAAA,QAAQ,EAAEX,OAAO,CAACY,UAAR,CAAmBC,SAhBjB;AAiBZC,MAAAA,UAAU,EAAE,CAAC,iBAAD,EAAoB,eAApB;AAjBA,KAAd;AAmBD,GAzB8B;AA0B/BC,EAAAA,OAAO,EAAE,mBAAY;AACnB;AACA,QAAIA,OAAO,GAAG,IAAIC,MAAM,CAACC,KAAP,CAAaC,QAAjB,EAAd;AACA,QAAIC,KAAK,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,CAAZ,CAHmB,CAG0B;;AAE7C,WAAOJ,OAAO,CAACK,MAAR,CAAeD,KAAf,EAAsB,CAAC,KAAD,EAAQ,CAAR,EAAW,KAAX,CAAtB,CAAP;AACD,GAhC8B;AAiC/BE,EAAAA,QAAQ,EAAE,oBAAY;AACpB,WAAO,KACL,+CADK,GAEL,uBAFK,GAGL,sBAHK,GAIL,wCAJK,GAKL,WALK,GAML,UANK,GAOL,UAPF;AAQD;AA1C8B,CAAjC","sourcesContent":["Blockly.Blocks[\"ens_resolver\"] = {\n  /**\n   * Block for string length operator.\n   * @this Blockly.Block\n   */\n  init: function () {\n    this.jsonInit({\n      message0: \"%1 %2 %3\",\n      args0: [{\n          type: \"field_image\",\n          src: \"./media/ens.png\",\n          width: 30,\n          height: 30,\n        },\n        {\n          type: \"field_vertical_separator\",\n        },\n        {\n          type: \"input_value\",\n          name: \"STRING\",\n        },\n      ],\n      category: Blockly.Categories.operators,\n      extensions: [\"colours_sensing\", \"output_string\"],\n    });\n  },\n  encoder: function () {\n    // encoding for atomic\n    let encoder = new ethers.utils.AbiCoder();\n    let types = [\"address\", \"uint256\", \"bytes\"]; // to, value, data\n\n    return encoder.encode(types, [\"0x0\", 0, \"0x0\"]);\n  },\n  template: function () {\n    return \"\" +\n      '<block type=\"ens_resolver\" id=\"ens_resolver\">' +\n      '<value name=\"STRING\">' +\n      '<shadow type=\"text\">' +\n      '<field name=\"TEXT\">vitalik.eth</field>' +\n      '</shadow>' +\n      '</value>' +\n      '</block>'\n  }\n};\n"]},"metadata":{},"sourceType":"module"}