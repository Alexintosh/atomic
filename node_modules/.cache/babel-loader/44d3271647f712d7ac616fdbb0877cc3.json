{"ast":null,"code":"/**\n * @license\n * Visual Blocks Editor\n *\n * Copyright 2017 Google Inc.\n * https://developers.google.com/blockly/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Extensions for vertical blocks in scratch-blocks.\n * The following extensions can be used to describe a block in Scratch terms.\n * For instance, a block in the operators colour scheme with a number output\n * would have the \"colours_operators\" and \"output_number\" extensions.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.ScratchBlocks.VerticalExtensions');\n\ngoog.require('Blockly.Colours');\n\ngoog.require('Blockly.constants');\n/**\n * Helper function that generates an extension based on a category name.\n * The generated function will set primary, secondary, and tertiary colours\n * based on the category name.\n * @param {String} category The name of the category to set colours for.\n * @return {function} An extension function that sets colours based on the given\n *     category.\n */\n\n\nBlockly.ScratchBlocks.VerticalExtensions.colourHelper = function (category) {\n  var colours = Blockly.Colours[category];\n\n  if (!(colours && colours.primary && colours.secondary && colours.tertiary)) {\n    throw new Error('Could not find colours for category \"' + category + '\"');\n  }\n  /**\n   * Set the primary, secondary, and tertiary colours on this block for the\n   * given category.\n   * @this {Blockly.Block}\n   */\n\n\n  return function () {\n    this.setColourFromRawValues_(colours.primary, colours.secondary, colours.tertiary);\n  };\n};\n/**\n * Extension to set the colours of a text field, which are all the same.\n */\n\n\nBlockly.ScratchBlocks.VerticalExtensions.COLOUR_TEXTFIELD = function () {\n  this.setColourFromRawValues_(Blockly.Colours.textField, Blockly.Colours.textField, Blockly.Colours.textField);\n};\n/**\n * Extension to make a block fit into a stack of statements, regardless of its\n * inputs.  That means the block should have a previous connection and a next\n * connection and have inline inputs.\n * @this {Blockly.Block}\n * @readonly\n */\n\n\nBlockly.ScratchBlocks.VerticalExtensions.SHAPE_STATEMENT = function () {\n  this.setInputsInline(true);\n  this.setPreviousStatement(true, null);\n  this.setNextStatement(true, null);\n};\n/**\n * Extension to make a block be shaped as a hat block, regardless of its\n * inputs.  That means the block should have a next connection and have inline\n * inputs, but have no previous connection.\n * @this {Blockly.Block}\n * @readonly\n */\n\n\nBlockly.ScratchBlocks.VerticalExtensions.SHAPE_HAT = function () {\n  this.setInputsInline(true);\n  this.setNextStatement(true, null);\n};\n/**\n * Extension to make a block be shaped as an end block, regardless of its\n * inputs.  That means the block should have a previous connection and have\n * inline inputs, but have no next connection.\n * @this {Blockly.Block}\n * @readonly\n */\n\n\nBlockly.ScratchBlocks.VerticalExtensions.SHAPE_END = function () {\n  this.setInputsInline(true);\n  this.setPreviousStatement(true, null);\n};\n/**\n * Extension to make represent a number reporter in Scratch-Blocks.\n * That means the block has inline inputs, a round output shape, and a 'Number'\n * output type.\n * @this {Blockly.Block}\n * @readonly\n */\n\n\nBlockly.ScratchBlocks.VerticalExtensions.OUTPUT_NUMBER = function () {\n  this.setInputsInline(true);\n  this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n  this.setOutput(true, 'Number');\n};\n/**\n * Extension to make represent a string reporter in Scratch-Blocks.\n * That means the block has inline inputs, a round output shape, and a 'String'\n * output type.\n * @this {Blockly.Block}\n * @readonly\n */\n\n\nBlockly.ScratchBlocks.VerticalExtensions.OUTPUT_STRING = function () {\n  this.setInputsInline(true);\n  this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n  this.setOutput(true, 'String');\n};\n/**\n * Extension to make represent a boolean reporter in Scratch-Blocks.\n * That means the block has inline inputs, a round output shape, and a 'Boolean'\n * output type.\n * @this {Blockly.Block}\n * @readonly\n */\n\n\nBlockly.ScratchBlocks.VerticalExtensions.OUTPUT_BOOLEAN = function () {\n  this.setInputsInline(true);\n  this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);\n  this.setOutput(true, 'Boolean');\n};\n/**\n * Mixin to add a context menu for a procedure definition block.\n * It adds the \"edit\" option and removes the \"duplicate\" option.\n * @mixin\n * @augments Blockly.Block\n * @package\n * @readonly\n */\n\n\nBlockly.ScratchBlocks.VerticalExtensions.PROCEDURE_DEF_CONTEXTMENU = {\n  /**\n   * Add the \"edit\" option and removes the \"duplicate\" option from the context\n   * menu.\n   * @param {!Array.<!Object>} menuOptions List of menu options to edit.\n   * @this Blockly.Block\n   */\n  customContextMenu: function customContextMenu(menuOptions) {\n    // Add the edit option at the end.\n    menuOptions.push(Blockly.Procedures.makeEditOption(this)); // Find the delete option and update its callback to be specific to\n    // functions.\n\n    for (var i = 0, option; option = menuOptions[i]; i++) {\n      if (option.text == Blockly.Msg.DELETE_BLOCK) {\n        var input = this.getInput('custom_block'); // this is the root block, not the shadow block.\n\n        if (input && input.connection && input.connection.targetBlock()) {\n          var procCode = input.connection.targetBlock().getProcCode();\n        } else {\n          return;\n        }\n\n        var rootBlock = this;\n\n        option.callback = function () {\n          var didDelete = Blockly.Procedures.deleteProcedureDefCallback(procCode, rootBlock);\n\n          if (!didDelete) {\n            // TODO:(#1151)\n            alert('To delete a block definition, first remove all uses of the block');\n          }\n        };\n      }\n    } // Find and remove the duplicate option\n\n\n    for (var i = 0, option; option = menuOptions[i]; i++) {\n      if (option.text == Blockly.Msg.DUPLICATE) {\n        menuOptions.splice(i, 1);\n        break;\n      }\n    }\n  }\n};\n/**\n * Mixin to add a context menu for a procedure call block.\n * It adds the \"edit\" option and the \"define\" option.\n * @mixin\n * @augments Blockly.Block\n * @package\n * @readonly\n */\n\nBlockly.ScratchBlocks.VerticalExtensions.PROCEDURE_CALL_CONTEXTMENU = {\n  /**\n   * Add the \"edit\" option to the context menu.\n   * @todo Add \"go to definition\" option once implemented.\n   * @param {!Array.<!Object>} menuOptions List of menu options to edit.\n   * @this Blockly.Block\n   */\n  customContextMenu: function customContextMenu(menuOptions) {\n    menuOptions.push(Blockly.Procedures.makeEditOption(this));\n  }\n};\n\nBlockly.ScratchBlocks.VerticalExtensions.SCRATCH_EXTENSION = function () {\n  this.isScratchExtension = true;\n};\n/**\n * Register all extensions for scratch-blocks.\n * @package\n */\n\n\nBlockly.ScratchBlocks.VerticalExtensions.registerAll = function () {\n  var categoryNames = ['control', 'data', 'data_lists', 'sounds', 'motion', 'looks', 'event', 'sensing', 'pen', 'operators', 'more']; // Register functions for all category colours.\n\n  for (var i = 0; i < categoryNames.length; i++) {\n    var name = categoryNames[i];\n    Blockly.Extensions.register('colours_' + name, Blockly.ScratchBlocks.VerticalExtensions.colourHelper(name));\n  } // Text fields transcend categories.\n\n\n  Blockly.Extensions.register('colours_textfield', Blockly.ScratchBlocks.VerticalExtensions.COLOUR_TEXTFIELD); // Register extensions for common block shapes.\n\n  Blockly.Extensions.register('shape_statement', Blockly.ScratchBlocks.VerticalExtensions.SHAPE_STATEMENT);\n  Blockly.Extensions.register('shape_hat', Blockly.ScratchBlocks.VerticalExtensions.SHAPE_HAT);\n  Blockly.Extensions.register('shape_end', Blockly.ScratchBlocks.VerticalExtensions.SHAPE_END); // Output shapes and types are related.\n\n  Blockly.Extensions.register('output_number', Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_NUMBER);\n  Blockly.Extensions.register('output_string', Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_STRING);\n  Blockly.Extensions.register('output_boolean', Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_BOOLEAN); // Custom procedures have interesting context menus.\n\n  Blockly.Extensions.registerMixin('procedure_def_contextmenu', Blockly.ScratchBlocks.VerticalExtensions.PROCEDURE_DEF_CONTEXTMENU);\n  Blockly.Extensions.registerMixin('procedure_call_contextmenu', Blockly.ScratchBlocks.VerticalExtensions.PROCEDURE_CALL_CONTEXTMENU); // Extension blocks have slightly different block rendering.\n\n  Blockly.Extensions.register('scratch_extension', Blockly.ScratchBlocks.VerticalExtensions.SCRATCH_EXTENSION);\n};\n\nBlockly.ScratchBlocks.VerticalExtensions.registerAll();","map":{"version":3,"sources":["/Users/polaco/prog/atomic/atomic/blocks/vertical_extensions.js"],"names":["goog","provide","require","Blockly","ScratchBlocks","VerticalExtensions","colourHelper","category","colours","Colours","primary","secondary","tertiary","Error","setColourFromRawValues_","COLOUR_TEXTFIELD","textField","SHAPE_STATEMENT","setInputsInline","setPreviousStatement","setNextStatement","SHAPE_HAT","SHAPE_END","OUTPUT_NUMBER","setOutputShape","OUTPUT_SHAPE_ROUND","setOutput","OUTPUT_STRING","OUTPUT_BOOLEAN","OUTPUT_SHAPE_HEXAGONAL","PROCEDURE_DEF_CONTEXTMENU","customContextMenu","menuOptions","push","Procedures","makeEditOption","i","option","text","Msg","DELETE_BLOCK","input","getInput","connection","targetBlock","procCode","getProcCode","rootBlock","callback","didDelete","deleteProcedureDefCallback","alert","DUPLICATE","splice","PROCEDURE_CALL_CONTEXTMENU","SCRATCH_EXTENSION","isScratchExtension","registerAll","categoryNames","length","name","Extensions","register","registerMixin"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;AAOA;;AAEAA,IAAI,CAACC,OAAL,CAAa,0CAAb;;AAEAD,IAAI,CAACE,OAAL,CAAa,iBAAb;;AACAF,IAAI,CAACE,OAAL,CAAa,mBAAb;AAGA;;;;;;;;;;AAQAC,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCC,YAAzC,GAAwD,UAASC,QAAT,EAAmB;AACzE,MAAIC,OAAO,GAAGL,OAAO,CAACM,OAAR,CAAgBF,QAAhB,CAAd;;AACA,MAAI,EAAEC,OAAO,IAAIA,OAAO,CAACE,OAAnB,IAA8BF,OAAO,CAACG,SAAtC,IAAmDH,OAAO,CAACI,QAA7D,CAAJ,EAA4E;AAC1E,UAAM,IAAIC,KAAJ,CAAU,0CAA0CN,QAA1C,GAAqD,GAA/D,CAAN;AACD;AACD;;;;;;;AAKA,SAAO,YAAW;AAChB,SAAKO,uBAAL,CAA6BN,OAAO,CAACE,OAArC,EAA8CF,OAAO,CAACG,SAAtD,EACIH,OAAO,CAACI,QADZ;AAED,GAHD;AAID,CAdD;AAgBA;;;;;AAGAT,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCU,gBAAzC,GAA4D,YAAW;AACrE,OAAKD,uBAAL,CAA6BX,OAAO,CAACM,OAAR,CAAgBO,SAA7C,EACIb,OAAO,CAACM,OAAR,CAAgBO,SADpB,EAC+Bb,OAAO,CAACM,OAAR,CAAgBO,SAD/C;AAED,CAHD;AAKA;;;;;;;;;AAOAb,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCY,eAAzC,GAA2D,YAAW;AACpE,OAAKC,eAAL,CAAqB,IAArB;AACA,OAAKC,oBAAL,CAA0B,IAA1B,EAAgC,IAAhC;AACA,OAAKC,gBAAL,CAAsB,IAAtB,EAA4B,IAA5B;AACD,CAJD;AAMA;;;;;;;;;AAOAjB,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCgB,SAAzC,GAAqD,YAAW;AAC9D,OAAKH,eAAL,CAAqB,IAArB;AACA,OAAKE,gBAAL,CAAsB,IAAtB,EAA4B,IAA5B;AACD,CAHD;AAKA;;;;;;;;;AAOAjB,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCiB,SAAzC,GAAqD,YAAW;AAC9D,OAAKJ,eAAL,CAAqB,IAArB;AACA,OAAKC,oBAAL,CAA0B,IAA1B,EAAgC,IAAhC;AACD,CAHD;AAKA;;;;;;;;;AAOAhB,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCkB,aAAzC,GAAyD,YAAW;AAClE,OAAKL,eAAL,CAAqB,IAArB;AACA,OAAKM,cAAL,CAAoBrB,OAAO,CAACsB,kBAA5B;AACA,OAAKC,SAAL,CAAe,IAAf,EAAqB,QAArB;AACD,CAJD;AAMA;;;;;;;;;AAOAvB,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCsB,aAAzC,GAAyD,YAAW;AAClE,OAAKT,eAAL,CAAqB,IAArB;AACA,OAAKM,cAAL,CAAoBrB,OAAO,CAACsB,kBAA5B;AACA,OAAKC,SAAL,CAAe,IAAf,EAAqB,QAArB;AACD,CAJD;AAMA;;;;;;;;;AAOAvB,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCuB,cAAzC,GAA0D,YAAW;AACnE,OAAKV,eAAL,CAAqB,IAArB;AACA,OAAKM,cAAL,CAAoBrB,OAAO,CAAC0B,sBAA5B;AACA,OAAKH,SAAL,CAAe,IAAf,EAAqB,SAArB;AACD,CAJD;AAMA;;;;;;;;;;AAQAvB,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCyB,yBAAzC,GAAqE;AACnE;;;;;;AAMAC,EAAAA,iBAAiB,EAAE,2BAASC,WAAT,EAAsB;AACvC;AACAA,IAAAA,WAAW,CAACC,IAAZ,CAAiB9B,OAAO,CAAC+B,UAAR,CAAmBC,cAAnB,CAAkC,IAAlC,CAAjB,EAFuC,CAIvC;AACA;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,MAAhB,EAAwBA,MAAM,GAAGL,WAAW,CAACI,CAAD,CAA5C,EAAiDA,CAAC,EAAlD,EAAsD;AACpD,UAAIC,MAAM,CAACC,IAAP,IAAenC,OAAO,CAACoC,GAAR,CAAYC,YAA/B,EAA6C;AAC3C,YAAIC,KAAK,GAAG,KAAKC,QAAL,CAAc,cAAd,CAAZ,CAD2C,CAE3C;;AACA,YAAID,KAAK,IAAIA,KAAK,CAACE,UAAf,IAA6BF,KAAK,CAACE,UAAN,CAAiBC,WAAjB,EAAjC,EAAiE;AAC/D,cAAIC,QAAQ,GAAGJ,KAAK,CAACE,UAAN,CAAiBC,WAAjB,GAA+BE,WAA/B,EAAf;AACD,SAFD,MAEO;AACL;AACD;;AACD,YAAIC,SAAS,GAAG,IAAhB;;AACAV,QAAAA,MAAM,CAACW,QAAP,GAAkB,YAAW;AAC3B,cAAIC,SAAS,GAAG9C,OAAO,CAAC+B,UAAR,CAAmBgB,0BAAnB,CACZL,QADY,EACFE,SADE,CAAhB;;AAEA,cAAI,CAACE,SAAL,EAAgB;AACd;AACAE,YAAAA,KAAK,CAAC,kEAAD,CAAL;AACD;AACF,SAPD;AAQD;AACF,KAzBsC,CA0BvC;;;AACA,SAAK,IAAIf,CAAC,GAAG,CAAR,EAAWC,MAAhB,EAAwBA,MAAM,GAAGL,WAAW,CAACI,CAAD,CAA5C,EAAiDA,CAAC,EAAlD,EAAsD;AACpD,UAAIC,MAAM,CAACC,IAAP,IAAenC,OAAO,CAACoC,GAAR,CAAYa,SAA/B,EAA0C;AACxCpB,QAAAA,WAAW,CAACqB,MAAZ,CAAmBjB,CAAnB,EAAsB,CAAtB;AACA;AACD;AACF;AACF;AAxCkE,CAArE;AA2CA;;;;;;;;;AAQAjC,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCiD,0BAAzC,GAAsE;AACpE;;;;;;AAMAvB,EAAAA,iBAAiB,EAAE,2BAASC,WAAT,EAAsB;AACvCA,IAAAA,WAAW,CAACC,IAAZ,CAAiB9B,OAAO,CAAC+B,UAAR,CAAmBC,cAAnB,CAAkC,IAAlC,CAAjB;AACD;AATmE,CAAtE;;AAaAhC,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCkD,iBAAzC,GAA6D,YAAW;AACtE,OAAKC,kBAAL,GAA0B,IAA1B;AACD,CAFD;AAGA;;;;;;AAIArD,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCoD,WAAzC,GAAuD,YAAW;AAChE,MAAIC,aAAa,GACb,CAAC,SAAD,EAAY,MAAZ,EAAoB,YAApB,EAAkC,QAAlC,EAA4C,QAA5C,EAAsD,OAAtD,EAA+D,OAA/D,EACE,SADF,EACa,KADb,EACoB,WADpB,EACiC,MADjC,CADJ,CADgE,CAIhE;;AACA,OAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,aAAa,CAACC,MAAlC,EAA0CvB,CAAC,EAA3C,EAA+C;AAC7C,QAAIwB,IAAI,GAAGF,aAAa,CAACtB,CAAD,CAAxB;AACAjC,IAAAA,OAAO,CAAC0D,UAAR,CAAmBC,QAAnB,CAA4B,aAAaF,IAAzC,EACIzD,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCC,YAAzC,CAAsDsD,IAAtD,CADJ;AAED,GAT+D,CAWhE;;;AACAzD,EAAAA,OAAO,CAAC0D,UAAR,CAAmBC,QAAnB,CAA4B,mBAA5B,EACI3D,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCU,gBAD7C,EAZgE,CAehE;;AACAZ,EAAAA,OAAO,CAAC0D,UAAR,CAAmBC,QAAnB,CAA4B,iBAA5B,EACI3D,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCY,eAD7C;AAEAd,EAAAA,OAAO,CAAC0D,UAAR,CAAmBC,QAAnB,CAA4B,WAA5B,EACI3D,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCgB,SAD7C;AAEAlB,EAAAA,OAAO,CAAC0D,UAAR,CAAmBC,QAAnB,CAA4B,WAA5B,EACI3D,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCiB,SAD7C,EApBgE,CAuBhE;;AACAnB,EAAAA,OAAO,CAAC0D,UAAR,CAAmBC,QAAnB,CAA4B,eAA5B,EACI3D,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCkB,aAD7C;AAEApB,EAAAA,OAAO,CAAC0D,UAAR,CAAmBC,QAAnB,CAA4B,eAA5B,EACI3D,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCsB,aAD7C;AAEAxB,EAAAA,OAAO,CAAC0D,UAAR,CAAmBC,QAAnB,CAA4B,gBAA5B,EACI3D,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCuB,cAD7C,EA5BgE,CA+BhE;;AACAzB,EAAAA,OAAO,CAAC0D,UAAR,CAAmBE,aAAnB,CAAiC,2BAAjC,EACI5D,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCyB,yBAD7C;AAEA3B,EAAAA,OAAO,CAAC0D,UAAR,CAAmBE,aAAnB,CAAiC,4BAAjC,EACI5D,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCiD,0BAD7C,EAlCgE,CAqChE;;AACAnD,EAAAA,OAAO,CAAC0D,UAAR,CAAmBC,QAAnB,CAA4B,mBAA5B,EACI3D,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCkD,iBAD7C;AAED,CAxCD;;AA0CApD,OAAO,CAACC,aAAR,CAAsBC,kBAAtB,CAAyCoD,WAAzC","sourcesContent":["/**\n * @license\n * Visual Blocks Editor\n *\n * Copyright 2017 Google Inc.\n * https://developers.google.com/blockly/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Extensions for vertical blocks in scratch-blocks.\n * The following extensions can be used to describe a block in Scratch terms.\n * For instance, a block in the operators colour scheme with a number output\n * would have the \"colours_operators\" and \"output_number\" extensions.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.ScratchBlocks.VerticalExtensions');\n\ngoog.require('Blockly.Colours');\ngoog.require('Blockly.constants');\n\n\n/**\n * Helper function that generates an extension based on a category name.\n * The generated function will set primary, secondary, and tertiary colours\n * based on the category name.\n * @param {String} category The name of the category to set colours for.\n * @return {function} An extension function that sets colours based on the given\n *     category.\n */\nBlockly.ScratchBlocks.VerticalExtensions.colourHelper = function(category) {\n  var colours = Blockly.Colours[category];\n  if (!(colours && colours.primary && colours.secondary && colours.tertiary)) {\n    throw new Error('Could not find colours for category \"' + category + '\"');\n  }\n  /**\n   * Set the primary, secondary, and tertiary colours on this block for the\n   * given category.\n   * @this {Blockly.Block}\n   */\n  return function() {\n    this.setColourFromRawValues_(colours.primary, colours.secondary,\n        colours.tertiary);\n  };\n};\n\n/**\n * Extension to set the colours of a text field, which are all the same.\n */\nBlockly.ScratchBlocks.VerticalExtensions.COLOUR_TEXTFIELD = function() {\n  this.setColourFromRawValues_(Blockly.Colours.textField,\n      Blockly.Colours.textField, Blockly.Colours.textField);\n};\n\n/**\n * Extension to make a block fit into a stack of statements, regardless of its\n * inputs.  That means the block should have a previous connection and a next\n * connection and have inline inputs.\n * @this {Blockly.Block}\n * @readonly\n */\nBlockly.ScratchBlocks.VerticalExtensions.SHAPE_STATEMENT = function() {\n  this.setInputsInline(true);\n  this.setPreviousStatement(true, null);\n  this.setNextStatement(true, null);\n};\n\n/**\n * Extension to make a block be shaped as a hat block, regardless of its\n * inputs.  That means the block should have a next connection and have inline\n * inputs, but have no previous connection.\n * @this {Blockly.Block}\n * @readonly\n */\nBlockly.ScratchBlocks.VerticalExtensions.SHAPE_HAT = function() {\n  this.setInputsInline(true);\n  this.setNextStatement(true, null);\n};\n\n/**\n * Extension to make a block be shaped as an end block, regardless of its\n * inputs.  That means the block should have a previous connection and have\n * inline inputs, but have no next connection.\n * @this {Blockly.Block}\n * @readonly\n */\nBlockly.ScratchBlocks.VerticalExtensions.SHAPE_END = function() {\n  this.setInputsInline(true);\n  this.setPreviousStatement(true, null);\n};\n\n/**\n * Extension to make represent a number reporter in Scratch-Blocks.\n * That means the block has inline inputs, a round output shape, and a 'Number'\n * output type.\n * @this {Blockly.Block}\n * @readonly\n */\nBlockly.ScratchBlocks.VerticalExtensions.OUTPUT_NUMBER = function() {\n  this.setInputsInline(true);\n  this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n  this.setOutput(true, 'Number');\n};\n\n/**\n * Extension to make represent a string reporter in Scratch-Blocks.\n * That means the block has inline inputs, a round output shape, and a 'String'\n * output type.\n * @this {Blockly.Block}\n * @readonly\n */\nBlockly.ScratchBlocks.VerticalExtensions.OUTPUT_STRING = function() {\n  this.setInputsInline(true);\n  this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n  this.setOutput(true, 'String');\n};\n\n/**\n * Extension to make represent a boolean reporter in Scratch-Blocks.\n * That means the block has inline inputs, a round output shape, and a 'Boolean'\n * output type.\n * @this {Blockly.Block}\n * @readonly\n */\nBlockly.ScratchBlocks.VerticalExtensions.OUTPUT_BOOLEAN = function() {\n  this.setInputsInline(true);\n  this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);\n  this.setOutput(true, 'Boolean');\n};\n\n/**\n * Mixin to add a context menu for a procedure definition block.\n * It adds the \"edit\" option and removes the \"duplicate\" option.\n * @mixin\n * @augments Blockly.Block\n * @package\n * @readonly\n */\nBlockly.ScratchBlocks.VerticalExtensions.PROCEDURE_DEF_CONTEXTMENU = {\n  /**\n   * Add the \"edit\" option and removes the \"duplicate\" option from the context\n   * menu.\n   * @param {!Array.<!Object>} menuOptions List of menu options to edit.\n   * @this Blockly.Block\n   */\n  customContextMenu: function(menuOptions) {\n    // Add the edit option at the end.\n    menuOptions.push(Blockly.Procedures.makeEditOption(this));\n\n    // Find the delete option and update its callback to be specific to\n    // functions.\n    for (var i = 0, option; option = menuOptions[i]; i++) {\n      if (option.text == Blockly.Msg.DELETE_BLOCK) {\n        var input = this.getInput('custom_block');\n        // this is the root block, not the shadow block.\n        if (input && input.connection && input.connection.targetBlock()) {\n          var procCode = input.connection.targetBlock().getProcCode();\n        } else {\n          return;\n        }\n        var rootBlock = this;\n        option.callback = function() {\n          var didDelete = Blockly.Procedures.deleteProcedureDefCallback(\n              procCode, rootBlock);\n          if (!didDelete) {\n            // TODO:(#1151)\n            alert('To delete a block definition, first remove all uses of the block');\n          }\n        };\n      }\n    }\n    // Find and remove the duplicate option\n    for (var i = 0, option; option = menuOptions[i]; i++) {\n      if (option.text == Blockly.Msg.DUPLICATE) {\n        menuOptions.splice(i, 1);\n        break;\n      }\n    }\n  }\n};\n\n/**\n * Mixin to add a context menu for a procedure call block.\n * It adds the \"edit\" option and the \"define\" option.\n * @mixin\n * @augments Blockly.Block\n * @package\n * @readonly\n */\nBlockly.ScratchBlocks.VerticalExtensions.PROCEDURE_CALL_CONTEXTMENU = {\n  /**\n   * Add the \"edit\" option to the context menu.\n   * @todo Add \"go to definition\" option once implemented.\n   * @param {!Array.<!Object>} menuOptions List of menu options to edit.\n   * @this Blockly.Block\n   */\n  customContextMenu: function(menuOptions) {\n    menuOptions.push(Blockly.Procedures.makeEditOption(this));\n  }\n};\n\n\nBlockly.ScratchBlocks.VerticalExtensions.SCRATCH_EXTENSION = function() {\n  this.isScratchExtension = true;\n};\n/**\n * Register all extensions for scratch-blocks.\n * @package\n */\nBlockly.ScratchBlocks.VerticalExtensions.registerAll = function() {\n  var categoryNames =\n      ['control', 'data', 'data_lists', 'sounds', 'motion', 'looks', 'event',\n        'sensing', 'pen', 'operators', 'more'];\n  // Register functions for all category colours.\n  for (var i = 0; i < categoryNames.length; i++) {\n    var name = categoryNames[i];\n    Blockly.Extensions.register('colours_' + name,\n        Blockly.ScratchBlocks.VerticalExtensions.colourHelper(name));\n  }\n\n  // Text fields transcend categories.\n  Blockly.Extensions.register('colours_textfield',\n      Blockly.ScratchBlocks.VerticalExtensions.COLOUR_TEXTFIELD);\n\n  // Register extensions for common block shapes.\n  Blockly.Extensions.register('shape_statement',\n      Blockly.ScratchBlocks.VerticalExtensions.SHAPE_STATEMENT);\n  Blockly.Extensions.register('shape_hat',\n      Blockly.ScratchBlocks.VerticalExtensions.SHAPE_HAT);\n  Blockly.Extensions.register('shape_end',\n      Blockly.ScratchBlocks.VerticalExtensions.SHAPE_END);\n\n  // Output shapes and types are related.\n  Blockly.Extensions.register('output_number',\n      Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_NUMBER);\n  Blockly.Extensions.register('output_string',\n      Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_STRING);\n  Blockly.Extensions.register('output_boolean',\n      Blockly.ScratchBlocks.VerticalExtensions.OUTPUT_BOOLEAN);\n\n  // Custom procedures have interesting context menus.\n  Blockly.Extensions.registerMixin('procedure_def_contextmenu',\n      Blockly.ScratchBlocks.VerticalExtensions.PROCEDURE_DEF_CONTEXTMENU);\n  Blockly.Extensions.registerMixin('procedure_call_contextmenu',\n      Blockly.ScratchBlocks.VerticalExtensions.PROCEDURE_CALL_CONTEXTMENU);\n\n  // Extension blocks have slightly different block rendering.\n  Blockly.Extensions.register('scratch_extension',\n      Blockly.ScratchBlocks.VerticalExtensions.SCRATCH_EXTENSION);\n};\n\nBlockly.ScratchBlocks.VerticalExtensions.registerAll();\n"]},"metadata":{},"sourceType":"module"}