{"ast":null,"code":"Blockly.Blocks[\"atomic_transaction_options\"] = {\n  /**\n   * Block for when loudness/timer/video motion is greater than the value.\n   * @this Blockly.Block\n   */\n  init: function init() {\n    this.jsonInit({\n      message0: \"%1 %2 transaction %3gas, %4ETH\",\n      args0: [{\n        type: \"field_image\",\n        src: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/emojidex/112/atom-symbol_269b.png\",\n        width: 40,\n        height: 40\n      }, {\n        type: \"field_vertical_separator\"\n      }, {\n        type: \"field_dropdown\",\n        name: \"GAS\",\n        options: [[\"High\", \"H\"], [\"Med\", \"M\"], [\"Low\", \"L\"]]\n      }, {\n        type: \"input_value\",\n        name: \"VALUE\"\n      }],\n      category: Blockly.Categories.event,\n      extensions: [\"colours_event\", \"shape_hat\"]\n    });\n  },\n  encoder: function encoder() {\n    // encoding for atomic\n    var encoder = new ethers.utils.AbiCoder();\n    var types = [\"address\", \"uint256\", \"bytes\"]; // to, value, data\n\n    return encoder.encode(types, [\"0x0\", 0, \"0x0\"]);\n  },\n  template: function template() {\n    return \"\" + '<block type=\"atomic_transaction_options\" id=\"atomic_transaction_options\">' + '<value name=\"VALUE\">' + '<shadow type=\"math_number\">' + '<field name=\"NUM\">10</field>' + '</shadow>' + '</value>' + '</block>';\n  }\n};","map":{"version":3,"sources":["/Users/polaco/prog/atomic/atomic/blocks/atomic_transaction_options.js"],"names":["Blockly","Blocks","init","jsonInit","message0","args0","type","src","width","height","name","options","category","Categories","event","extensions","encoder","ethers","utils","AbiCoder","types","encode","template"],"mappings":"AAAAA,OAAO,CAACC,MAAR,CAAe,4BAAf,IAA+C;AAC7C;;;;AAIAC,EAAAA,IAAI,EAAE,gBAAY;AAChB,SAAKC,QAAL,CAAc;AACZC,MAAAA,QAAQ,EAAE,gCADE;AAEZC,MAAAA,KAAK,EAAE,CAAC;AACJC,QAAAA,IAAI,EAAE,aADF;AAEJC,QAAAA,GAAG,EAAE,yGAFD;AAGJC,QAAAA,KAAK,EAAE,EAHH;AAIJC,QAAAA,MAAM,EAAE;AAJJ,OAAD,EAML;AACEH,QAAAA,IAAI,EAAE;AADR,OANK,EASL;AACEA,QAAAA,IAAI,EAAE,gBADR;AAEEI,QAAAA,IAAI,EAAE,KAFR;AAGEC,QAAAA,OAAO,EAAE,CACP,CAAC,MAAD,EAAS,GAAT,CADO,EAEP,CAAC,KAAD,EAAQ,GAAR,CAFO,EAGP,CAAC,KAAD,EAAQ,GAAR,CAHO;AAHX,OATK,EAkBL;AACEL,QAAAA,IAAI,EAAE,aADR;AAEEI,QAAAA,IAAI,EAAE;AAFR,OAlBK,CAFK;AAyBZE,MAAAA,QAAQ,EAAEZ,OAAO,CAACa,UAAR,CAAmBC,KAzBjB;AA0BZC,MAAAA,UAAU,EAAE,CAAC,eAAD,EAAkB,WAAlB;AA1BA,KAAd;AA4BD,GAlC4C;AAmC7CC,EAAAA,OAAO,EAAE,mBAAY;AACnB;AACA,QAAIA,OAAO,GAAG,IAAIC,MAAM,CAACC,KAAP,CAAaC,QAAjB,EAAd;AACA,QAAIC,KAAK,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,CAAZ,CAHmB,CAG0B;;AAE7C,WAAOJ,OAAO,CAACK,MAAR,CAAeD,KAAf,EAAsB,CAAC,KAAD,EAAQ,CAAR,EAAW,KAAX,CAAtB,CAAP;AACD,GAzC4C;AA0C7CE,EAAAA,QAAQ,EAAE,oBAAY;AACpB,WAAO,KACL,2EADK,GAEL,sBAFK,GAGL,6BAHK,GAIL,8BAJK,GAKL,WALK,GAML,UANK,GAOL,UAPF;AAQD;AAnD4C,CAA/C","sourcesContent":["Blockly.Blocks[\"atomic_transaction_options\"] = {\n  /**\n   * Block for when loudness/timer/video motion is greater than the value.\n   * @this Blockly.Block\n   */\n  init: function () {\n    this.jsonInit({\n      message0: \"%1 %2 transaction %3gas, %4ETH\",\n      args0: [{\n          type: \"field_image\",\n          src: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/emojidex/112/atom-symbol_269b.png\",\n          width: 40,\n          height: 40,\n        },\n        {\n          type: \"field_vertical_separator\",\n        },\n        {\n          type: \"field_dropdown\",\n          name: \"GAS\",\n          options: [\n            [\"High\", \"H\"],\n            [\"Med\", \"M\"],\n            [\"Low\", \"L\"],\n          ],\n        },\n        {\n          type: \"input_value\",\n          name: \"VALUE\",\n        },\n      ],\n      category: Blockly.Categories.event,\n      extensions: [\"colours_event\", \"shape_hat\"],\n    });\n  },\n  encoder: function () {\n    // encoding for atomic\n    let encoder = new ethers.utils.AbiCoder();\n    let types = [\"address\", \"uint256\", \"bytes\"]; // to, value, data\n\n    return encoder.encode(types, [\"0x0\", 0, \"0x0\"]);\n  },\n  template: function () {\n    return \"\" +\n      '<block type=\"atomic_transaction_options\" id=\"atomic_transaction_options\">' +\n      '<value name=\"VALUE\">' +\n      '<shadow type=\"math_number\">' +\n      '<field name=\"NUM\">10</field>' +\n      '</shadow>' +\n      '</value>' +\n      '</block>'\n  }\n};\n"]},"metadata":{},"sourceType":"module"}