{"ast":null,"code":"/**\n * @license\n * Visual Blocks Editor\n *\n * Copyright 2012 Google Inc.\n * https://developers.google.com/blockly/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Math blocks for Blockly.\n * @author q.neutron@gmail.com (Quynh Neutron)\n */\n'use strict';\n\ngoog.provide('Blockly.Blocks.math');\n\ngoog.require('Blockly.Blocks');\n\ngoog.require('Blockly.Colours');\n\ngoog.require('Blockly.constants');\n\nBlockly.Blocks['math_number'] = {\n  /**\n   * Block for generic numeric value.\n   * @this Blockly.Block\n   */\n  init: function init() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [{\n        \"type\": \"field_number\",\n        \"name\": \"NUM\",\n        \"value\": \"0\"\n      }],\n      \"output\": \"Number\",\n      \"outputShape\": Blockly.OUTPUT_SHAPE_ROUND,\n      \"colour\": Blockly.Colours.textField,\n      \"colourSecondary\": Blockly.Colours.textField,\n      \"colourTertiary\": Blockly.Colours.textField\n    });\n  }\n};\nBlockly.Blocks['math_integer'] = {\n  /**\n   * Block for integer value (no decimal, + or -).\n   * @this Blockly.Block\n   */\n  init: function init() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [{\n        \"type\": \"field_number\",\n        \"name\": \"NUM\",\n        \"precision\": 1\n      }],\n      \"output\": \"Number\",\n      \"outputShape\": Blockly.OUTPUT_SHAPE_ROUND,\n      \"colour\": Blockly.Colours.textField,\n      \"colourSecondary\": Blockly.Colours.textField,\n      \"colourTertiary\": Blockly.Colours.textField\n    });\n  }\n};\nBlockly.Blocks['math_whole_number'] = {\n  /**\n   * Block for whole number value, no negatives or decimals.\n   * @this Blockly.Block\n   */\n  init: function init() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [{\n        \"type\": \"field_number\",\n        \"name\": \"NUM\",\n        \"min\": 0,\n        \"precision\": 1\n      }],\n      \"output\": \"Number\",\n      \"outputShape\": Blockly.OUTPUT_SHAPE_ROUND,\n      \"colour\": Blockly.Colours.textField,\n      \"colourSecondary\": Blockly.Colours.textField,\n      \"colourTertiary\": Blockly.Colours.textField\n    });\n  }\n};\nBlockly.Blocks['math_positive_number'] = {\n  /**\n   * Block for positive number value, with decimal.\n   * @this Blockly.Block\n   */\n  init: function init() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [{\n        \"type\": \"field_number\",\n        \"name\": \"NUM\",\n        \"min\": 0\n      }],\n      \"output\": \"Number\",\n      \"outputShape\": Blockly.OUTPUT_SHAPE_ROUND,\n      \"colour\": Blockly.Colours.textField,\n      \"colourSecondary\": Blockly.Colours.textField,\n      \"colourTertiary\": Blockly.Colours.textField\n    });\n  }\n};\nBlockly.Blocks['math_angle'] = {\n  /**\n   * Block for angle picker.\n   * @this Blockly.Block\n   */\n  init: function init() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [{\n        \"type\": \"field_angle\",\n        \"name\": \"NUM\",\n        \"value\": 90\n      }],\n      \"output\": \"Number\",\n      \"outputShape\": Blockly.OUTPUT_SHAPE_ROUND,\n      \"colour\": Blockly.Colours.textField,\n      \"colourSecondary\": Blockly.Colours.textField,\n      \"colourTertiary\": Blockly.Colours.textField\n    });\n  }\n};","map":{"version":3,"sources":["/Users/polaco/prog/atomic/atomic/blocks/math.js"],"names":["goog","provide","require","Blockly","Blocks","init","jsonInit","OUTPUT_SHAPE_ROUND","Colours","textField"],"mappings":"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","sourcesContent":["/**\n * @license\n * Visual Blocks Editor\n *\n * Copyright 2012 Google Inc.\n * https://developers.google.com/blockly/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Math blocks for Blockly.\n * @author q.neutron@gmail.com (Quynh Neutron)\n */\n'use strict';\n\ngoog.provide('Blockly.Blocks.math');\n\ngoog.require('Blockly.Blocks');\n\ngoog.require('Blockly.Colours');\n\ngoog.require('Blockly.constants');\n\nBlockly.Blocks['math_number'] = {\n  /**\n   * Block for generic numeric value.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [\n        {\n          \"type\": \"field_number\",\n          \"name\": \"NUM\",\n          \"value\": \"0\"\n        }\n      ],\n      \"output\": \"Number\",\n      \"outputShape\": Blockly.OUTPUT_SHAPE_ROUND,\n      \"colour\": Blockly.Colours.textField,\n      \"colourSecondary\": Blockly.Colours.textField,\n      \"colourTertiary\": Blockly.Colours.textField\n    });\n  }\n};\n\nBlockly.Blocks['math_integer'] = {\n  /**\n   * Block for integer value (no decimal, + or -).\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [\n        {\n          \"type\": \"field_number\",\n          \"name\": \"NUM\",\n          \"precision\": 1\n        }\n      ],\n      \"output\": \"Number\",\n      \"outputShape\": Blockly.OUTPUT_SHAPE_ROUND,\n      \"colour\": Blockly.Colours.textField,\n      \"colourSecondary\": Blockly.Colours.textField,\n      \"colourTertiary\": Blockly.Colours.textField\n    });\n  }\n};\n\nBlockly.Blocks['math_whole_number'] = {\n  /**\n   * Block for whole number value, no negatives or decimals.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [\n        {\n          \"type\": \"field_number\",\n          \"name\": \"NUM\",\n          \"min\": 0,\n          \"precision\": 1\n        }\n      ],\n      \"output\": \"Number\",\n      \"outputShape\": Blockly.OUTPUT_SHAPE_ROUND,\n      \"colour\": Blockly.Colours.textField,\n      \"colourSecondary\": Blockly.Colours.textField,\n      \"colourTertiary\": Blockly.Colours.textField\n    });\n  }\n};\n\nBlockly.Blocks['math_positive_number'] = {\n  /**\n   * Block for positive number value, with decimal.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [\n        {\n          \"type\": \"field_number\",\n          \"name\": \"NUM\",\n          \"min\": 0\n        }\n      ],\n      \"output\": \"Number\",\n      \"outputShape\": Blockly.OUTPUT_SHAPE_ROUND,\n      \"colour\": Blockly.Colours.textField,\n      \"colourSecondary\": Blockly.Colours.textField,\n      \"colourTertiary\": Blockly.Colours.textField\n    });\n  }\n};\n\nBlockly.Blocks['math_angle'] = {\n  /**\n   * Block for angle picker.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [\n        {\n          \"type\": \"field_angle\",\n          \"name\": \"NUM\",\n          \"value\": 90\n        }\n      ],\n      \"output\": \"Number\",\n      \"outputShape\": Blockly.OUTPUT_SHAPE_ROUND,\n      \"colour\": Blockly.Colours.textField,\n      \"colourSecondary\": Blockly.Colours.textField,\n      \"colourTertiary\": Blockly.Colours.textField\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}