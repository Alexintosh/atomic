{"ast":null,"code":"var eth_transfer = {\n  /**\n   * @this Blockly.Block\n   */\n  init: function init() {\n    this.jsonInit({\n      message0: \"%1 %2 send %3 %4 to %5\",\n      args0: [{\n        type: \"field_image\",\n        src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Ethereum-icon-purple.svg/1200px-Ethereum-icon-purple.svg.png\",\n        width: 40,\n        height: 40\n      }, {\n        type: \"field_vertical_separator\"\n      }, {\n        type: \"input_value\",\n        name: \"VALUE\"\n      }, {\n        type: \"input_value\",\n        name: \"UNIT\"\n      }, {\n        type: \"input_value\",\n        name: \"TO\"\n      }],\n      category: Blockly.Categories.more,\n      extensions: [\"colours_control\", \"shape_statement\", \"scratch_extension\"]\n    });\n  },\n  encoder: function encoder(value, unit, to) {\n    // encoding for atomic\n    var encoder = new ethers.utils.AbiCoder();\n    var types = [\"address\", \"uint256\", \"bytes\"]; // to, value, data\n\n    return encoder.encode(types, [to, ethers.utils.parseUnits(value, unit).toString(), \"0x0\"]).slice(2);\n  },\n  template: function template() {\n    return \"\" + '<block type=\"eth_transfer\" id=\"eth_transfer\">' + '<value name=\"VALUE\">' + '<shadow type=\"math_number\">' + '<field name=\"NUM\">10</field>' + '</shadow>' + '</value>' + '<value name=\"UNIT\">' + '<shadow type=\"eth-unit-list\"></shadow>' + '</value>' + '<value name=\"TO\">' + '<shadow type=\"ens_resolver\">' + '<value name=\"STRING\">' + '<shadow type=\"text\">' + '<field name=\"TEXT\">atomicninja.eth</field>' + '</shadow>' + '</value>' + '</shadow>' + '</value>' + '</block>';\n  }\n};\nBlockly.Blocks[\"eth_transfer\"] = eth_transfer;\nBlockly.Blocks[\"eth-unit-list\"] = {\n  /**\n   * @this Blockly.Block\n   */\n  init: function init() {\n    this.jsonInit({\n      message0: \"%1\",\n      args0: [{\n        type: \"field_dropdown\",\n        name: \"UNIT\",\n        options: [[\"WEI\", \"WEI\"], [\"GWEI\", \"GWEI\"], [\"ETH\", \"ETH\"]]\n      }],\n      extensions: [\"colours_control\", \"output_string\"]\n    });\n  }\n};","map":{"version":3,"sources":["/Users/polaco/prog/atomic/atomic/blocks/eth_transfer.js"],"names":["eth_transfer","init","jsonInit","message0","args0","type","src","width","height","name","category","Blockly","Categories","more","extensions","encoder","value","unit","to","ethers","utils","AbiCoder","types","encode","parseUnits","toString","slice","template","Blocks","options"],"mappings":"AAAA,IAAMA,YAAY,GAAG;AACnB;;;AAGAC,EAAAA,IAAI,EAAE,gBAAY;AAChB,SAAKC,QAAL,CAAc;AACZC,MAAAA,QAAQ,EAAE,wBADE;AAEZC,MAAAA,KAAK,EAAE,CAAC;AACJC,QAAAA,IAAI,EAAE,aADF;AAEJC,QAAAA,GAAG,EAAE,wHAFD;AAGJC,QAAAA,KAAK,EAAE,EAHH;AAIJC,QAAAA,MAAM,EAAE;AAJJ,OAAD,EAML;AACEH,QAAAA,IAAI,EAAE;AADR,OANK,EASL;AACEA,QAAAA,IAAI,EAAE,aADR;AAEEI,QAAAA,IAAI,EAAE;AAFR,OATK,EAaL;AACEJ,QAAAA,IAAI,EAAE,aADR;AAEEI,QAAAA,IAAI,EAAE;AAFR,OAbK,EAiBL;AACEJ,QAAAA,IAAI,EAAE,aADR;AAEEI,QAAAA,IAAI,EAAE;AAFR,OAjBK,CAFK;AAwBZC,MAAAA,QAAQ,EAAEC,OAAO,CAACC,UAAR,CAAmBC,IAxBjB;AAyBZC,MAAAA,UAAU,EAAE,CAAC,iBAAD,EAAoB,iBAApB,EAAuC,mBAAvC;AAzBA,KAAd;AA2BD,GAhCkB;AAiCnBC,EAAAA,OAAO,EAAE,iBAAUC,KAAV,EAAiBC,IAAjB,EAAuBC,EAAvB,EAA2B;AAClC;AACA,QAAIH,OAAO,GAAG,IAAII,MAAM,CAACC,KAAP,CAAaC,QAAjB,EAAd;AACA,QAAIC,KAAK,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,CAAZ,CAHkC,CAGW;;AAE7C,WAAOP,OAAO,CAACQ,MAAR,CAAeD,KAAf,EAAsB,CAACJ,EAAD,EAAKC,MAAM,CAACC,KAAP,CAAaI,UAAb,CAAwBR,KAAxB,EAA+BC,IAA/B,EAAqCQ,QAArC,EAAL,EAAsD,KAAtD,CAAtB,EAAoFC,KAApF,CAA0F,CAA1F,CAAP;AACD,GAvCkB;AAwCnBC,EAAAA,QAAQ,EAAE,oBAAY;AACpB,WAAO,KACL,+CADK,GAEL,sBAFK,GAGL,6BAHK,GAIL,8BAJK,GAKL,WALK,GAML,UANK,GAOL,qBAPK,GAQL,wCARK,GASL,UATK,GAUL,mBAVK,GAWL,8BAXK,GAYL,uBAZK,GAaL,sBAbK,GAcL,4CAdK,GAeL,WAfK,GAgBL,UAhBK,GAiBL,WAjBK,GAkBL,UAlBK,GAmBL,UAnBF;AAoBD;AA7DkB,CAArB;AAiEAhB,OAAO,CAACiB,MAAR,CAAe,cAAf,IAAiC5B,YAAjC;AAEAW,OAAO,CAACiB,MAAR,CAAe,eAAf,IAAkC;AAChC;;;AAGA3B,EAAAA,IAAI,EAAE,gBAAY;AAChB,SAAKC,QAAL,CAAc;AACZC,MAAAA,QAAQ,EAAE,IADE;AAEZC,MAAAA,KAAK,EAAE,CAAC;AACNC,QAAAA,IAAI,EAAE,gBADA;AAENI,QAAAA,IAAI,EAAE,MAFA;AAGNoB,QAAAA,OAAO,EAAE,CACP,CAAC,KAAD,EAAQ,KAAR,CADO,EAEP,CAAC,MAAD,EAAS,MAAT,CAFO,EAGP,CAAC,KAAD,EAAQ,KAAR,CAHO;AAHH,OAAD,CAFK;AAWZf,MAAAA,UAAU,EAAE,CAAC,iBAAD,EAAoB,eAApB;AAXA,KAAd;AAaD;AAlB+B,CAAlC","sourcesContent":["const eth_transfer = {\n  /**\n   * @this Blockly.Block\n   */\n  init: function () {\n    this.jsonInit({\n      message0: \"%1 %2 send %3 %4 to %5\",\n      args0: [{\n          type: \"field_image\",\n          src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Ethereum-icon-purple.svg/1200px-Ethereum-icon-purple.svg.png\",\n          width: 40,\n          height: 40,\n        },\n        {\n          type: \"field_vertical_separator\",\n        },\n        {\n          type: \"input_value\",\n          name: \"VALUE\",\n        },\n        {\n          type: \"input_value\",\n          name: \"UNIT\",\n        },\n        {\n          type: \"input_value\",\n          name: \"TO\",\n        },\n      ],\n      category: Blockly.Categories.more,\n      extensions: [\"colours_control\", \"shape_statement\", \"scratch_extension\"],\n    });\n  },\n  encoder: function (value, unit, to) {\n    // encoding for atomic\n    let encoder = new ethers.utils.AbiCoder();\n    let types = [\"address\", \"uint256\", \"bytes\"]; // to, value, data\n\n    return encoder.encode(types, [to, ethers.utils.parseUnits(value, unit).toString(), \"0x0\"]).slice(2);\n  },\n  template: function () {\n    return \"\" +\n      '<block type=\"eth_transfer\" id=\"eth_transfer\">' +\n      '<value name=\"VALUE\">' +\n      '<shadow type=\"math_number\">' +\n      '<field name=\"NUM\">10</field>' +\n      '</shadow>' +\n      '</value>' +\n      '<value name=\"UNIT\">' +\n      '<shadow type=\"eth-unit-list\"></shadow>' +\n      '</value>' +\n      '<value name=\"TO\">' +\n      '<shadow type=\"ens_resolver\">' +\n      '<value name=\"STRING\">' +\n      '<shadow type=\"text\">' +\n      '<field name=\"TEXT\">atomicninja.eth</field>' +\n      '</shadow>' +\n      '</value>' +\n      '</shadow>' +\n      '</value>' +\n      '</block>'\n  }\n};\n\n\nBlockly.Blocks[\"eth_transfer\"] = eth_transfer\n\nBlockly.Blocks[\"eth-unit-list\"] = {\n  /**\n   * @this Blockly.Block\n   */\n  init: function () {\n    this.jsonInit({\n      message0: \"%1\",\n      args0: [{\n        type: \"field_dropdown\",\n        name: \"UNIT\",\n        options: [\n          [\"WEI\", \"WEI\"],\n          [\"GWEI\", \"GWEI\"],\n          [\"ETH\", \"ETH\"],\n        ],\n      }, ],\n      extensions: [\"colours_control\", \"output_string\"],\n    });\n  },\n};"]},"metadata":{},"sourceType":"module"}