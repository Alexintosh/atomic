{"ast":null,"code":"/**\n * @license\n * Visual Blocks Editor\n *\n * Copyright 2016 Massachusetts Institute of Technology\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\ngoog.provide('Blockly.Blocks.defaultToolbox');\n\ngoog.require('Blockly.Blocks');\n/**\n * @fileoverview Provide a default toolbox XML.\n */\n\n\nBlockly.Blocks.defaultToolbox = '<xml id=\"toolbox-categories\" style=\"display: none\">' + '<category name=\"ATOMIC\" id=\"erc20\" colour=\"#FF6680\" secondaryColour=\"#FF4D6A\" ' + 'iconURI=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Ethereum-icon-purple.svg/1200px-Ethereum-icon-purple.svg.png\" showStatusButton=\"true\">';\n\nfor (var _i = 0, _Object$entries = Object.entries(Blockly.Blocks); _i < _Object$entries.length; _i++) {\n  var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      key = _Object$entries$_i[0],\n      value = _Object$entries$_i[1];\n\n  if (value.template) Blockly.Blocks.defaultToolbox += value.template;\n}\n\nBlockly.Blocks.defaultToolbox += '</category>' + '</xml>';","map":{"version":3,"sources":["/Users/polaco/prog/atomic/atomic/blocks/toolbox.js"],"names":["goog","provide","require","Blockly","Blocks","defaultToolbox","Object","entries","key","value","template"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;AAEAA,IAAI,CAACC,OAAL,CAAa,+BAAb;;AAEAD,IAAI,CAACE,OAAL,CAAa,gBAAb;AAEA;;;;;AAIAC,OAAO,CAACC,MAAR,CAAeC,cAAf,GAAgC,wDAC9B,gFAD8B,GAE9B,2JAFF;;AAIA,mCAAyBC,MAAM,CAACC,OAAP,CAAeJ,OAAO,CAACC,MAAvB,CAAzB,qCAAyD;AAAA;AAAA,MAA/CI,GAA+C;AAAA,MAA1CC,KAA0C;;AACvD,MAAIA,KAAK,CAACC,QAAV,EAAoBP,OAAO,CAACC,MAAR,CAAeC,cAAf,IAAiCI,KAAK,CAACC,QAAvC;AACrB;;AAEDP,OAAO,CAACC,MAAR,CAAeC,cAAf,IAAiC,gBAAgB,QAAjD","sourcesContent":["/**\n * @license\n * Visual Blocks Editor\n *\n * Copyright 2016 Massachusetts Institute of Technology\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\ngoog.provide('Blockly.Blocks.defaultToolbox');\n\ngoog.require('Blockly.Blocks');\n\n/**\n * @fileoverview Provide a default toolbox XML.\n */\n\nBlockly.Blocks.defaultToolbox = '<xml id=\"toolbox-categories\" style=\"display: none\">' +\n  '<category name=\"ATOMIC\" id=\"erc20\" colour=\"#FF6680\" secondaryColour=\"#FF4D6A\" ' +\n  'iconURI=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Ethereum-icon-purple.svg/1200px-Ethereum-icon-purple.svg.png\" showStatusButton=\"true\">'\n\nfor (let [key, value] of Object.entries(Blockly.Blocks)) {\n  if (value.template) Blockly.Blocks.defaultToolbox += value.template\n}\n\nBlockly.Blocks.defaultToolbox += '</category>' + '</xml>';\n"]},"metadata":{},"sourceType":"module"}