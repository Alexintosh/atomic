{"ast":null,"code":"Blockly.Blocks[\"erc20_transfer\"] = {\n  /**\n   * @this Blockly.Block\n   */\n  init: function init() {\n    this.jsonInit({\n      message0: \"%1 %2 transfer %3 %4 to %5\",\n      args0: [{\n        type: \"field_image\",\n        src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Ethereum-icon-purple.svg/1200px-Ethereum-icon-purple.svg.png\",\n        width: 40,\n        height: 40\n      }, {\n        type: \"field_vertical_separator\"\n      }, {\n        type: \"input_value\",\n        name: \"VALUE\"\n      }, {\n        type: \"input_value\",\n        name: \"TOKEN\"\n      }, {\n        type: \"input_value\",\n        name: \"TO\"\n      }],\n      category: Blockly.Categories.more,\n      colour: 359,\n      extensions: [\"shape_statement\"]\n    });\n  },\n  encoder: function encoder(value, tokenAddress, to) {\n    var erc20Interface = new ethers.utils.Interface(legos.erc20.abi);\n    var calldata = erc20Interface.functions.transfer.encode([to, ethers.utils.parseEther(value)]); // encoding for atomic\n\n    var encoder = new ethers.utils.AbiCoder();\n    var types = [\"address\", \"uint256\", \"bytes\"]; // to, value, data\n\n    return encoder.encode(types, [tokenAddress, \"0\", calldata]).slice(2);\n  },\n  template: function template() {\n    return \"\" + '<block type=\"erc20_transfer\" id=\"erc20_transfer\">' + '<value name=\"VALUE\">' + '<shadow type=\"math_number\">' + '<field name=\"NUM\">10</field>' + '</shadow>' + '</value>' + '<value name=\"TOKEN\">' + '<shadow type=\"erc20_token_list\"></shadow>' + '</value>' + '<value name=\"TO\">' + '<shadow type=\"ens_resolver\">' + '<value name=\"STRING\">' + '<shadow type=\"text\">' + '<field name=\"TEXT\">atomicninja.eth</field>' + '</shadow>' + '</value>' + '</shadow>' + '</value>' + '</block>';\n  }\n};\nBlockly.Blocks[\"erc20_token_list\"] = {\n  /**\n   * @this Blockly.Block\n   */\n  init: function init() {\n    this.jsonInit({\n      message0: \"%1\",\n      args0: [{\n        type: \"field_dropdown\",\n        name: \"TOKEN\",\n        options: [[\"DAI\", \"0x6b175474e89094c44da98b954eedeac495271d0f\"], [\"BAT\", \"0x0d8775f648430679a709e98d2b0cb6250d2887ef\"], [\"WETH\", \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"]]\n      }],\n      extensions: [\"colours_pen\", \"output_string\"]\n    });\n  }\n};","map":{"version":3,"sources":["/Users/polaco/prog/atomic/atomic/blocks/erc20_transfer.js"],"names":["Blockly","Blocks","init","jsonInit","message0","args0","type","src","width","height","name","category","Categories","more","colour","extensions","encoder","value","tokenAddress","to","erc20Interface","ethers","utils","Interface","legos","erc20","abi","calldata","functions","transfer","encode","parseEther","AbiCoder","types","slice","template","options"],"mappings":"AAAAA,OAAO,CAACC,MAAR,CAAe,gBAAf,IAAmC;AACjC;;;AAIAC,EAAAA,IAAI,EAAE,gBAAY;AAChB,SAAKC,QAAL,CAAc;AACZC,MAAAA,QAAQ,EAAE,4BADE;AAEZC,MAAAA,KAAK,EAAE,CAAC;AACJC,QAAAA,IAAI,EAAE,aADF;AAEJC,QAAAA,GAAG,EAAE,wHAFD;AAGJC,QAAAA,KAAK,EAAE,EAHH;AAIJC,QAAAA,MAAM,EAAE;AAJJ,OAAD,EAML;AACEH,QAAAA,IAAI,EAAE;AADR,OANK,EASL;AACEA,QAAAA,IAAI,EAAE,aADR;AAEEI,QAAAA,IAAI,EAAE;AAFR,OATK,EAaL;AACEJ,QAAAA,IAAI,EAAE,aADR;AAEEI,QAAAA,IAAI,EAAE;AAFR,OAbK,EAiBL;AACEJ,QAAAA,IAAI,EAAE,aADR;AAEEI,QAAAA,IAAI,EAAE;AAFR,OAjBK,CAFK;AAwBZC,MAAAA,QAAQ,EAAEX,OAAO,CAACY,UAAR,CAAmBC,IAxBjB;AAyBZC,MAAAA,MAAM,EAAE,GAzBI;AA0BZC,MAAAA,UAAU,EAAE,CAAC,iBAAD;AA1BA,KAAd;AA4BD,GAlCgC;AAoCjCC,EAAAA,OAAO,EAAE,iBAAUC,KAAV,EAAiBC,YAAjB,EAA+BC,EAA/B,EAAmC;AAC1C,QAAIC,cAAc,GAAG,IAAIC,MAAM,CAACC,KAAP,CAAaC,SAAjB,CAA2BC,KAAK,CAACC,KAAN,CAAYC,GAAvC,CAArB;AACA,QAAIC,QAAQ,GAAGP,cAAc,CAACQ,SAAf,CAAyBC,QAAzB,CAAkCC,MAAlC,CAAyC,CAACX,EAAD,EAAKE,MAAM,CAACC,KAAP,CAAaS,UAAb,CAAwBd,KAAxB,CAAL,CAAzC,CAAf,CAF0C,CAI1C;;AACA,QAAID,OAAO,GAAG,IAAIK,MAAM,CAACC,KAAP,CAAaU,QAAjB,EAAd;AACA,QAAIC,KAAK,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,CAAZ,CAN0C,CAMG;;AAE7C,WAAOjB,OAAO,CAACc,MAAR,CAAeG,KAAf,EAAsB,CAACf,YAAD,EAAe,GAAf,EAAoBS,QAApB,CAAtB,EAAqDO,KAArD,CAA2D,CAA3D,CAAP;AACD,GA7CgC;AA8CjCC,EAAAA,QAAQ,EAAE,oBAAY;AACpB,WAAO,KACL,mDADK,GAEL,sBAFK,GAGL,6BAHK,GAIL,8BAJK,GAKL,WALK,GAML,UANK,GAOL,sBAPK,GAQL,2CARK,GASL,UATK,GAUL,mBAVK,GAWL,8BAXK,GAYL,uBAZK,GAaL,sBAbK,GAcL,4CAdK,GAeL,WAfK,GAgBL,UAhBK,GAiBL,WAjBK,GAkBL,UAlBK,GAmBL,UAnBF;AAoBD;AAnEgC,CAAnC;AAsEAnC,OAAO,CAACC,MAAR,CAAe,kBAAf,IAAqC;AACnC;;;AAGAC,EAAAA,IAAI,EAAE,gBAAY;AAChB,SAAKC,QAAL,CAAc;AACZC,MAAAA,QAAQ,EAAE,IADE;AAEZC,MAAAA,KAAK,EAAE,CAAC;AACNC,QAAAA,IAAI,EAAE,gBADA;AAENI,QAAAA,IAAI,EAAE,OAFA;AAGN0B,QAAAA,OAAO,EAAE,CACP,CAAC,KAAD,EAAQ,4CAAR,CADO,EAEP,CAAC,KAAD,EAAQ,4CAAR,CAFO,EAGP,CAAC,MAAD,EAAS,4CAAT,CAHO;AAHH,OAAD,CAFK;AAWZrB,MAAAA,UAAU,EAAE,CAAC,aAAD,EAAgB,eAAhB;AAXA,KAAd;AAaD;AAlBkC,CAArC","sourcesContent":["Blockly.Blocks[\"erc20_transfer\"] = {\n  /**\n   * @this Blockly.Block\n   */\n\n  init: function () {\n    this.jsonInit({\n      message0: \"%1 %2 transfer %3 %4 to %5\",\n      args0: [{\n          type: \"field_image\",\n          src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Ethereum-icon-purple.svg/1200px-Ethereum-icon-purple.svg.png\",\n          width: 40,\n          height: 40,\n        },\n        {\n          type: \"field_vertical_separator\",\n        },\n        {\n          type: \"input_value\",\n          name: \"VALUE\",\n        },\n        {\n          type: \"input_value\",\n          name: \"TOKEN\",\n        },\n        {\n          type: \"input_value\",\n          name: \"TO\",\n        },\n      ],\n      category: Blockly.Categories.more,\n      colour: 359,\n      extensions: [\"shape_statement\"]\n    });\n  },\n\n  encoder: function (value, tokenAddress, to) {\n    let erc20Interface = new ethers.utils.Interface(legos.erc20.abi)\n    let calldata = erc20Interface.functions.transfer.encode([to, ethers.utils.parseEther(value)])\n\n    // encoding for atomic\n    let encoder = new ethers.utils.AbiCoder();\n    let types = [\"address\", \"uint256\", \"bytes\"]; // to, value, data\n\n    return encoder.encode(types, [tokenAddress, \"0\", calldata]).slice(2);\n  },\n  template: function () {\n    return \"\" +\n      '<block type=\"erc20_transfer\" id=\"erc20_transfer\">' +\n      '<value name=\"VALUE\">' +\n      '<shadow type=\"math_number\">' +\n      '<field name=\"NUM\">10</field>' +\n      '</shadow>' +\n      '</value>' +\n      '<value name=\"TOKEN\">' +\n      '<shadow type=\"erc20_token_list\"></shadow>' +\n      '</value>' +\n      '<value name=\"TO\">' +\n      '<shadow type=\"ens_resolver\">' +\n      '<value name=\"STRING\">' +\n      '<shadow type=\"text\">' +\n      '<field name=\"TEXT\">atomicninja.eth</field>' +\n      '</shadow>' +\n      '</value>' +\n      '</shadow>' +\n      '</value>' +\n      '</block>'\n  }\n};\n\nBlockly.Blocks[\"erc20_token_list\"] = {\n  /**\n   * @this Blockly.Block\n   */\n  init: function () {\n    this.jsonInit({\n      message0: \"%1\",\n      args0: [{\n        type: \"field_dropdown\",\n        name: \"TOKEN\",\n        options: [\n          [\"DAI\", \"0x6b175474e89094c44da98b954eedeac495271d0f\"],\n          [\"BAT\", \"0x0d8775f648430679a709e98d2b0cb6250d2887ef\"],\n          [\"WETH\", \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"],\n        ],\n      }, ],\n      extensions: [\"colours_pen\", \"output_string\"],\n    });\n  },\n};"]},"metadata":{},"sourceType":"module"}