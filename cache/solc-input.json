{
  "language": "Solidity",
  "sources": {
    "contracts/Atomic.sol": {
      "content": "pragma solidity 0.5.15;\n\ncontract Atomic {\n\n    /// @dev Sends multiple transactions and reverts all if one fails, self destructs immediately\n    /// @param transactions Encoded transactions. Each transaction is encoded as a\n    ///                     tuple(address,uint256,bytes). The bytes\n    ///                     of all encoded transactions are concatenated to form the input.\n    constructor(bytes memory transactions) public payable {\n\n        assembly {\n            let length := mload(transactions)\n            let i := 0x20\n            for { } lt(i, length) { } {\n                let to := mload(add(transactions, i))\n                let value := mload(add(transactions, add(i, 0x20)))\n                let dataLength := mload(add(transactions, add(i, 0x60)))\n                let data := add(transactions, add(i, 0x80))\n                let success := call(210000000000000, to, value, data, dataLength, 0, 0)\n                if eq(success, 0) { revert(0, \"One of the transactions failed\") }\n                i := add(i, add(0x80, mul(div(add(dataLength, 0x1f), 0x20), 0x20)))\n            }\n        }\n        // selfdestruct(tx.origin);\n    }\n}"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}